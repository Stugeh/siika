// Generates the AST node definitions in the ast package
package tools

import (
	"bytes"
	"fmt"
	"go/format"
	"log"
	"os"
	"strings"
)

func defineAst(fileName string, types []string) {
	path := "./ast/" + fileName + ".go"

	println("Generating file: " + path)

	// Create a buffer to hold the generated code
	var buf bytes.Buffer

	// Write the header and import statement to the buffer
	buf.WriteString("// This file is auto generated by /tools/AstGenerator.go\n\n")
	buf.WriteString("package ast\n\n")
	buf.WriteString("import . \"gka.com/front-end\"\n\n")

	buf.WriteString("type " + fileName + " interface {\n Print()[]rune\n" + strings.ToLower(fileName) + "Node()}\n\n")

	buf.WriteString("type (\n")

	interfaceImplementations := []string{}

	// Create structs
	for _, line := range types {
		halves := strings.Split(line, ":")

		structName := strings.TrimSpace(halves[0]) + fileName
		structFields := strings.Split(halves[1], ",")

		buf.WriteString(structName + " struct {\n")

		for _, field := range structFields {
			buf.WriteString(strings.TrimSpace(field) + "\n")
		}

		buf.WriteString("}\n")

		interfaceImplementations = append(interfaceImplementations, ("func (*" + structName + ")" + strings.ToLower(fileName) + "Node()     {}\n"))
	}

	buf.WriteString(")\n\n")

	buf.WriteString("// Ensure that only " + fileName + " nodes can be assigned to " + fileName + " fields\n")
	for _, impl := range interfaceImplementations {
		buf.WriteString(impl)

	}

	// Format the generated code
	formattedCode, err := format.Source(buf.Bytes())
	if err != nil {
		fmt.Println("Error formatting code:", err)
		return
	}

	// Create or open the file
	file, err := os.Create(path)
	if err != nil {
		log.Fatal(err)
		panic("Failed to create or write to file.")
	}
	defer file.Close()

	// Write the formatted code to the file
	_, err = file.Write(formattedCode)
	if err != nil {
		fmt.Println("Error writing formatted code to file:", err)
		return
	}

	fmt.Println("Code generated and written to", path)
}

// Okay maybe i didnt need to do this for go... The struct definitions are barely longer than these function calls
func GenerateGrammarFiles() {
	defineAst("Expr", []string{
		"Assign   : Name Token, Value Expr",
		"Binary   : Left Expr, Operator Token, Right Expr",
		"Call     : Callee Expr, Paren Token, Arguments []Expr",
		"Get      : Object Expr, Name Token",
		"Grouping : Expression Expr",
		"Literal  : Value string",
		"Logical  : Left Expr, Operator Token, Right Expr",
		"Set      : Object Expr, Name Token, Value Expr",
		"Super    : Keyword Token, Method Token",
		"This     : Keyword Token",
		"Unary    : Operator Token, Right Expr",
		"Variable : Name Token",
	})

	defineAst("Stmt", []string{
		"Block      : Statements []Stmt",
		"Class      : Name Token, Superclass VariableExpr, Methods []FunctionStmt",
		"Expression : Expression Expr",
		"Function   : Name Token, Params []Token, Body []Stmt",
		"If         : Condition Expr, ThenBranch Stmt, ElseBranch Stmt",
		"Print      : Expression Expr",
		"Return     : Keyword Token, Value Expr",
		"Var        : Name Token, Initializer Expr",
		"While      : Condition Expr, Body Stmt",
	})

}
